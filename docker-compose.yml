version: '3.7'

services:
  zookeeper:
    container_name: zookeeper
    image: docker.io/bitnami/zookeeper:3.6
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper_data:/bitnami"
    env_file:
      - ./conf/local/zookeeper.env
  kafka:
    container_name: kafka
    image: docker.io/bitnami/kafka:3.1
    ports:
      - "9093:9093"
    volumes:
      - "kafka_data:/bitnami"
    env_file:
      - ./conf/local/kafka.env
    depends_on:
      - zookeeper

  kafka_init_topics:
    image: docker.io/bitnami/kafka:3.1
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics.sh --bootstrap-server kafka:9092 --list

      echo -e 'Creating kafka topics'
      kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic test_sha --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics.sh --bootstrap-server kafka:9092 --list
      "

  vuln4shift_database:
    container_name: vuln4shift-database
    image: docker.io/library/postgres:14
    restart: unless-stopped
    env_file:
      - ./conf/common.env
      - ./conf/db.env
    ports:
      - 25432:5432
    volumes:
      - vuln4shift-db-data:/var/lib/postgresql/data

  vuln4shift_dbadmin:
    command: /vuln4shift/main dbadmin
    container_name: vuln4shift-dbadmin
    build:
      context: .
      dockerfile: ./Dockerfile
    image: vuln4shift/app:latest
    env_file:
      - ./conf/common.env
      - ./conf/dbadmin.env
    depends_on:
      - vuln4shift_database

  vuln4shift_manager:
    command: /vuln4shift/main manager
    container_name: vuln4shift-manager
    build:
      context: .
      dockerfile: ./Dockerfile
    image: vuln4shift/app:latest
    env_file:
      - ./conf/common.env
      - ./conf/manager.env
    ports:
      - 8000:8000
    depends_on:
      vuln4shift_database:
        condition: service_started
      vuln4shift_dbadmin:
        condition: service_completed_successfully

  vuln4shift_digestwriter:
    command: /vuln4shift/main digestwriter
    container_name: vuln4shift-digestwriter
    build:
      context: .
      dockerfile: ./Dockerfile
    image: vuln4shift/app:latest
    env_file:
      - ./conf/common.env
      - ./conf/digestwriter.env
    depends_on:
      vuln4shift_database:
        condition: service_started
      vuln4shift_dbadmin:
        condition: service_completed_successfully
      kafka_init_topics:
        condition: service_completed_successfully
  # --------------------------------------------------
  # unit tests profile containers
  vuln4shift_unit_tests:
    command: go test -v -p 1 -coverprofile=coverage.txt -covermode=atomic ./...
    container_name: vuln4shift-unit-tests
    build:
      context: .
      dockerfile: ./Dockerfile
      target: buildimg
    image: vuln4shift/app:latest
    env_file:
      - ./conf/common.env
      - ./conf/db.env
    environment:
      - GIN_MODE=release
    depends_on:
      vuln4shift_database:
        condition: service_started
      vuln4shift_dbadmin:
        condition: service_completed_successfully
    profiles:
      - unit-tests
    volumes:
      - ./:/vuln4shift

  vuln4shift_pyxis:
    command: /vuln4shift/main pyxis
    container_name: vuln4shift-pyxis
    build:
      context: .
      dockerfile: ./Dockerfile
    image: vuln4shift/app:latest
    env_file:
      - ./conf/common.env
      - ./conf/pyxis.env
    depends_on:
      vuln4shift_database:
        condition: service_started
    profiles:
      - pyxis

  vuln4shift_vmsync:
    command: /vuln4shift/main vmsync
    container_name: vuln4shift-vmsync
    build:
      context: .
      dockerfile: ./Dockerfile
    image: vuln4shift/app:latest
    env_file:
      - ./conf/common.env
      - ./conf/vmsync.env
    depends_on:
      vuln4shift_database:
        condition: service_started
    profiles:
      - vmsync

  vuln4shift_cleaner:
    command: /vuln4shift/main cleaner
    container_name: vuln4shift-cleaner
    build:
      context: .
      dockerfile: ./Dockerfile
    image: vuln4shift/app:latest
    env_file:
      - ./conf/common.env
      - ./conf/cleaner.env
    depends_on:
      vuln4shift_database:
        condition: service_started
    profiles:
      - cleaner

  vuln4shift_prometheus:
    container_name: vuln4shift-prometheus
    image: prom/prometheus:v2.36.0
    volumes:
      - vuln4shift-prometheus-data:/prometheus
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    security_opt:
      - label=disable
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - 9095:9090
    depends_on:
      - vuln4shift_digestwriter
      - vuln4shift_manager
    restart: unless-stopped

  vuln4shift_grafana:
    container_name: vuln4shift-grafana
    build:
      context: ./
      dockerfile: ./monitoring/grafana/Dockerfile
    image: vuln4shift/grafana:latest
    depends_on:
      - vuln4shift_prometheus
    ports:
      - 3005:3000
    restart: unless-stopped

  vuln4shift_expsync:
    command: /vuln4shift/main expsync
    container_name: vuln4shift-expsync
    build:
      context: .
      dockerfile: ./Dockerfile
    image: vuln4shift/app:latest
    env_file:
      - ./conf/common.env
      - ./conf/expsync.env
    depends_on:
      vuln4shift_database:
        condition: service_started
    profiles:
      - expsync

volumes:
  vuln4shift-db-data:
  zookeeper_data:
  kafka_data:
  vuln4shift-prometheus-data:
