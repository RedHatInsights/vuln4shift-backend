version: '3.7'

services:
  zookeeper:
    container_name: zookeeper
    image: docker.io/bitnami/zookeeper:3.6
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper_data:/bitnami"
    env_file:
      - ./conf/local/zookeeper.env
  kafka:
    container_name: kafka
    image: docker.io/bitnami/kafka:3.1
    ports:
      - "9092:9092"
    volumes:
      - "kafka_data:/bitnami"
    env_file:
      - ./conf/local/kafka.env
    depends_on:
      - zookeeper
        #command: bash -c 'kafka-topics.sh --list --bootstrap-server :9092 & && /opt/bitnami/scripts/kafka/run.sh'

  kafka_init_topics:
    image: docker.io/bitnami/kafka:3.1
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics.sh --bootstrap-server kafka:9092 --list

      echo -e 'Creating kafka topics'
      kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic test_sha --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics.sh --bootstrap-server kafka:9092 --list
      "

  vuln4shift_database:
    container_name: vuln4shift-database
    image: docker.io/library/postgres:14
    restart: unless-stopped
    env_file:
      - ./conf/db.env
      - ./conf/dbadmin.env
    ports:
      - 25432:5432
    volumes:
      - vuln4shift-db-data:/var/lib/postgresql/data

  vuln4shift_dbadmin:
    command: /vuln4shift/main dbadmin
    container_name: vuln4shift-dbadmin
    build:
        context: .
        dockerfile: ./Dockerfile
    image: vuln4shift/app:latest
    env_file:
      - ./conf/db.env
      - ./conf/dbadmin.env
    depends_on:
      - vuln4shift_database

  vuln4shift_manager:
    command: /vuln4shift/main manager
    container_name: vuln4shift-manager
    build:
      context: .
      dockerfile: ./Dockerfile
    image: vuln4shift/app:latest
    env_file:
      - ./conf/db.env
      - ./conf/manager.env
    ports:
      - 8000:8000
    depends_on:
      vuln4shift_database:
        condition: service_started
      vuln4shift_dbadmin:
        condition: service_completed_successfully

  vuln4shift_digestwriter:
    command: /vuln4shift/main digestwriter
    container_name: vuln4shift-digestwriter
    build:
      context: .
      dockerfile: ./Dockerfile
    image: vuln4shift/app:latest
    env_file:
      - ./conf/db.env
      - ./conf/digestwriter.env
    depends_on:
      vuln4shift_database:
        condition: service_started
      vuln4shift_dbadmin:
        condition: service_completed_successfully
      kafka_init_topics:
        condition: service_completed_successfully
  # --------------------------------------------------
  # unit tests profile containers
  vuln4shift_unit_tests:
    command: go test -v ./...
    container_name: vuln4shift-unit-tests
    build:
      context: .
      dockerfile: ./Dockerfile
      target: buildimg
    image: vuln4shift/app:latest
    env_file:
      - ./conf/db.env
      - ./conf/manager.env
    depends_on:
      vuln4shift_database:
        condition: service_started
      vuln4shift_dbadmin:
        condition: service_completed_successfully
    profiles:
      - unit-tests

  vuln4shift_pyxis:
    command: /vuln4shift/main pyxis
    container_name: vuln4shift-pyxis
    build:
      context: .
      dockerfile: ./Dockerfile
    image: vuln4shift/app:latest
    env_file:
      - ./conf/db.env
      - ./conf/pyxis.env
    depends_on:
      vuln4shift_database:
        condition: service_started
    profiles:
      - pyxis

volumes:
  vuln4shift-db-data:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local

